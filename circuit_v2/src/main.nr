use dep::std;
use dep::noir_merkleroot;

fn main(
    values: [Field; 3], // private inputs, in the order of name, age, countrycode
    nonces: [Field; 3],
    commits: pub [Field; 3], // commitments, in the order of name, age, countrycode
    age: pub Field,
    leaf: Field, 
    root: Field, 
    path_indices: [Field; 8],
    siblings: [Field; 8],
) {
    // Check commitment which consist of name and nonce from Poseidon hash
    for i in 0..3 {
        assert(commits[i] == std::hash::poseidon::bn254::hash_2([values[i], nonces[i]]));
    }
    
    // Age confirmation
    assert(age as u32 <= values[1] as u32);

    // CountryCode eligibility check
    let new_root = noir_merkleroot::compute_merkle_root(leaf, path_indices, siblings);
    assert(new_root == root);
}

#[test]
fn test_main() {
    main(
        [5363620503418597221,20,19024], 
        [825373492,825373492,825373492],
        [20199178195905961735016964499017101892030965751975447305563774106156390243229,8819208578747443403144689107172414148408385498253978002562079324362344755523,3998228618412097657774020135623673392269184037010946178179137544382082909182],
        18,
        13780856135824609486835123660791248959181113742546918549559321242116770234576,
        3507270469832926990571112645872386345557614009066375654691910206440851534809,
        [0,0,1,1,0,1,1,0],
        [14520510218039433773459597944105601781578483631006408988284677481489650471896,16735405162150476769165535806199980191266151907719469609340290185602038249334,11607634630385916762103142687024023731847490136503700052557112073181947753651,1094530894963466396181348105151045704221228209480186211832907007839607915796,3284044843315180235425920080565507273212761221150458610158014968492963231945,4641050443441813769099735638332230934538706616831662404912867311564816535000,13308983921089595976695015024214414181663897095192147251475586735720084500210,12699940109500066053124654505808015855541980379149317240855603319465855478536]
    );
}
