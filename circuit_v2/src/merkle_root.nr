use dep::std;

fn compute_merkle_root(leaf: Field, path_indices: [Field;8], siblings: [Field;8]) -> Field {
    let n = siblings.len();
    let mut current = leaf;
    for i in 0..n {
        let is_right = (path_indices[i] == 1) as bool;
        let (hash_left, hash_right) = if is_right {
            (siblings[i], current)
         } else {
            (current, siblings[i])
         };
      current = std::hash::poseidon::bn254::hash_2([hash_left, hash_right]);
    };
    current
   }

#[test]
fn test_compute_merkle_root() {
    let root = compute_merkle_root(
        13780856135824609486835123660791248959181113742546918549559321242116770234576,
        [0,0,1,1,0,1,1,0],
        [14520510218039433773459597944105601781578483631006408988284677481489650471896,16735405162150476769165535806199980191266151907719469609340290185602038249334,11607634630385916762103142687024023731847490136503700052557112073181947753651,1094530894963466396181348105151045704221228209480186211832907007839607915796,3284044843315180235425920080565507273212761221150458610158014968492963231945,4641050443441813769099735638332230934538706616831662404912867311564816535000,13308983921089595976695015024214414181663897095192147251475586735720084500210,12699940109500066053124654505808015855541980379149317240855603319465855478536]
    );
    assert(root == 3507270469832926990571112645872386345557614009066375654691910206440851534809);
}

